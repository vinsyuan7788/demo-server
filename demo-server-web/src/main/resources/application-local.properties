### Configuration regarding server ###
# The port of the application
server.port=9090
# The context path of the application: the path would be {protocol}:{ip}:{port}/{context-path}/{servlet-path}/{api-path} if configured
server.context-path=
# The servlet path for the servlet dispatcher: the path would be {protocol}:{ip}:{port}/{context-path}/{servlet-path}/{api-path} if configured
server.servlet-path=
# The display name of the application
server.display-name=Demo Spring-Boot Application

### Configuration regarding Spring ###
# The name of the application
spring.application.name=demo-server

### Configuration regarding MyBatis ###
# Locations that store the Mapper XML files
mybatis.mapper-locations=classpath*:mybatis/**/*Mapper.xml
# Package that stores the POJO
# mybatis.type-aliases-package=

### Configuration regarding data-source ###
# Type of the data source
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
# Name of the JDBC driver
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# URL of the data source
spring.datasource.url=jdbc:mysql://localhost:3306/demo?useUnicode=true&characterEncoding=utf8&useSSL=true
# Username to access the data source
spring.datasource.username=demo
# Password to access the data source
spring.datasource.password=demo

### Configuration regarding connection pool ###
# Initial size of the thread pool to access the data source
spring.datasource.druid.initial-size=1
# Minimum number of idle threads
spring.datasource.druid.min-idle=1
# Max number of active threads
spring.datasource.druid.max-active=3
# If perform testing before borrowing thread from the thread pool
spring.datasource.druid.test-on-borrow=true
# Configure the filters to be used in Druid
spring.datasource.druid.filters=stat,wall,config,slf4j
# Enable WebStatFilter
spring.datasource.druid.web-stat-filter.enabled=true
# The URL to match by the filter
spring.datasource.druid.web-stat-filter.url-pattern=/*
# The resource to be excluded or ignored by the filter
spring.datasource.druid.web-stat-filter.exclusions=.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*
# Enable StatViewServlet
spring.datasource.druid.stat-view-servlet.enabled=true
# Username to log in the monitoring page
spring.datasource.druid.stat-view-servlet.login-username=demo
# Password to log in the monitoring page
spring.datasource.druid.stat-view-servlet.login-password=demo
# The URL to be matched by the servlet
spring.datasource.druid.stat-view-servlet.url-pattern=/druid/*
# IP white list: allow all access from everywhere if left un-configured or empty
spring.datasource.druid.stat-view-servlet.allow=
# IP black list: do not block any access if left un-configured or empty (If there is white list, then white list has higher priority)
spring.datasource.druid.stat-view-servlet.deny=
# Prohibit the "Reset All" button on the monitoring HTML page
spring.datasource.druid.stat-view-servlet.reset-enable=false
# Enable ConfigFilter
spring.datasource.druid.filter.config.enabled=true
# Merge simple SQLs; log slow SQLs; disable decryption; etc.
spring.datasource.druid.connection-properties=config.decrypt=false;druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000

### Configuration regarding Redis ###
# Addresses of cluster nodes
# spring.redis.cluster.nodes=192.168.18.225:6381,192.168.18.225:6382,192.168.18.225:6383
# Maximum number of redirects to follow when executing commands across the cluster
# spring.redis.cluster.max-redirects=6
# The host of Redis server
spring.redis.host=localhost
# The port of Redis server
spring.redis.port=6379
# The password to access Redis
spring.redis.password=demo
# The database index used by the connection factory
spring.redis.database=0
# The connection timeout in milliseconds
spring.redis.timeout=3000
# Max number of connections that can be allocated by the pool at a given time.
spring.redis.pool.max-active=8
# Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted
spring.redis.pool.max-wait=-1
# Max number of "idle" connections in the pool
spring.redis.pool.max-idle=8
# Target for the minimum number of idle connections to maintain in the pool
spring.redis.pool.min-idle=0

### Configuration regarding Activiti ###
# The prefix of location that stores process definition (e.g., BPMN files)
spring.activiti.process-definition-location-prefix=classpath:/activiti/
# The suffix of location that stores process definition (e.g., BPMN files)
spring.activiti.process-definition-location-suffixes=**.bpmn,**.xml
# If check and auto-deploy the process definition (e.g., BPMN files defined in default or specified location) when Activiti starts up (e.g., when application starts up)
spring.activiti.check-process-definitions=false
# Which operation performs to the database when Activiti starts up (e.g., when application starts up)
# -- false: compare the version of the tables created by Activiti; throw exception if version is not matched or table is not found
#    -- Frequently used in production environment (assuming deleting Activiti-generated tables in production environment does not happen)
# -- true: update all the tables created by Activiti; automatically create tables if tables do not exist
#    -- Frequently used in development environment
# -- create_drop: create tables needed by Activiti. Delete those tables when Activiti is shut down manually
#    -- Frequently used in unit-test of Activiti
# -- drop_create: delete the old tables and automatically create new tables
spring.activiti.database-schema-update=true
# The level to record history data
# -- none: do not save any history data, hence this is the most efficient way when Activiti is running
# -- activity: save workflow instance and behavior only, do not save other data
# -- audit (default value): on top of "activity" level, save all workflow tasks and properties
# -- full: on top of "audit" level, save all detailed data, including workflow parameters, etc.
spring.activiti.history-level=full
# Check if the history tables (that start with "act_hi_") exist
spring.activiti.db-history-used=true

### Configuration regarding XXL-Job ###
# Name of the JDBC driver for XXL-Job
xxl.job.db.driverClass=com.mysql.cj.jdbc.Driver
# URL of the data source for XXL-Job
xxl.job.db.url=jdbc:mysql://localhost:3306/demo?useUnicode=true&characterEncoding=utf8&useSSL=true
# Username to access the data source for XXL-Job
xxl.job.db.user=demo
# Password to access the data source for XXL-Job
xxl.job.db.password=demo
#
xxl.job.login.username=demo
#
xxl.job.login.password=demo
#
xxl.job.admin.addresses=localhost:8001/xxl-job-admin
#
xxl.job.executor.appname=xxl-job-executor-demo-server
#
xxl.job.executor.ip=
#
xxl.job.executor.port=-1
#
xxl.job.accessToken=
#xxl.job.executor.logpath=/data/logs/xxl-job
#xxl.job.executor.logretentiondays=-1

### Configuration regarding Swagger: see "demo-base" project ###
# Base package for swagger's documentation
demo.swagger.scanPackage=com.demo
# The title of current project
demo.swagger.title=Demo Server
# If the documentation of APIs will be displayed by Swagger documentation or not
demo.swagger.display=yes
# The description of current project
demo.swagger.description=This is a demonstration of application as server
# The contact name of current project
demo.swagger.contactName=Vince Yuan
# The contact URL of current project
demo.swagger.contactUrl=
# The contact email of current project
demo.swagger.contactEmail=
# The version of current project
demo.swagger.version=1.0
# The license URL of current project
demo.swagger.licenseUrl=

### Configuration regarding Snowflake: see "demo-base" project ###
# The addresses of snowflake ID servers
snowflake.servers = 127.0.0.1:8585
# Timeout in milliseconds to wait for the snowflake ID
snowflake.timeout = 3000